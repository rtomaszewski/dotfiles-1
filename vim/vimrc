" {{{ vim-plug auto installation
"
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall
      endif
call plug#begin('~/.config/nvim/plugged')

" }}}

" {{{  Enabled plugins
" set the runtime path to include Vundle and initialize

call plug#begin('~/.vim/bundle')

Plug 'tpope/vim-fugitive'              " git wrapper
Plug 'honza/vim-snippets'              " actual snippets
Plug 'benekastah/neomake'              " syntastic replacement
Plug 'Shougo/deoplete.nvim'             " completion
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips' ", { 'on' : [] }            code snippets
Plug 'tomtom/tcomment_vim'             " easy comments
Plug 'rstacruz/sparkup'                " parser for condensed HTML
Plug 'vim-airline/vim-airline'         " nice statusline
Plug 'vim-airline/vim-airline-themes'  " nice statusline - themes
Plug 'jwhitley/vim-matchit'            " better jumping with %
Plug 'endwise.vim'                     " wisely 'end' functions etc
Plug 'kchmck/vim-coffee-script'        " coffe script support
Plug 'godlygeek/tabular'               " dependency for vim-markdown
Plug 'plasticboy/vim-markdown'         " markdown syntax
Plug 'tpope/vim-repeat'                " extend support for repeating with .
" " npm -g install instant-markdown-d
" Plug 'suan/vim-instant-markdown'     " instant markdown preview
Plug 'jiangmiao/auto-pairs'            " insert mode completion for quotes, etc
Plug 'tpope/vim-surround'              " quickly surround
Plug 'vim-ruby/vim-ruby'               " needed because...neovim
Plug 'ecomba/vim-ruby-refactoring'     " ruby refactoring functions
Plug 'scrooloose/nerdtree' , { 'on': 'NERDTreeToggle' }  " file manager
Plug 'thoughtbot/vim-rspec'            " rspec runner
Plug 'tpope/vim-dispatch'              " start stuff in background
Plug 'nelstrom/vim-textobj-rubyblock'  " text object for selecting ruby blocks
Plug 'kana/vim-textobj-user'           " dependency for vim-textobj-rubyblock
Plug 'christoomey/vim-tmux-navigator'  " seamless navigation between tmux panes and splits
" Plug 'neilagabriel/vim-geeknote'       " evernote vim support
Plug 'tpope/vim-unimpaired'            " set of movement mappings
Plug 'henrik/vim-qargs'                " adds :Qargs command
Plug 'dhruvasagar/vim-table-mode'      " helps with creating tables
Plug 'benmills/vimux'                  " interact with tmux
Plug 'jgdavey/vim-turbux'              " Turbo Ruby testing with tmux
Plug 'fmoralesc/vim-pad'               " Evernote replacement
Plug 'gregsexton/gitv'                 " gitk for vim
Plug 'nathanaelkane/vim-indent-guides' " visual indent
Plug 'idanarye/vim-merginal'           " help with merges and rebase
Plug 'junegunn/vim-easy-align'         " easy alignment
Plug 'mattn/gist-vim'                  " create GIST from vim
Plug 'mattn/webapi-vim'                " create GIST from vim
Plug 'epeli/slimux'                    " start interactive session
Plug 'rking/ag.vim'                    " vim-ag
" Fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak'
Plug 'slim-template/vim-slim'   " slim templating support
Plug 'amiorin/vim-project'
" color packages
Plug 'chriskempson/base16-vim'         " base16 colors
Plug 'mhinz/vim-janah'
" Plug 'flazz/vim-colorschemes'  " all colorschemes
Plug 'w0ng/vim-hybrid'   "vim-hybrid
Plug 'vimoutliner/vimoutliner'
"}}}

" {{{ DISABLED Plugs
" Plug 'tpope/vim-rvm'                   " RVM support
" Plug 'mrtazz/simplenote.vim'           " simplenote support
" Plug 'cseelus/vim-colors-clearance'
" Plug 'MaxSt/FlatColor'
" Plug 'blerins/flattown'
" Plug 'rizzatti/dash.vim' - disabled  - took way too long to startup
" Plug 'tpope/vim-bundler' " probably not needed (Jul 2015)
" Plug 'mattly/iterm-colors-pencil'
" Plug 'reedes/vim-colors-pencil'
" Plug 'tpope/vim-rails' "set of rails helpers
" Plug 'airblade/vim-gitgutter'
" Plug 'skrobul/grb256'          " my version of grb256
" Plug 'vim-scripts/CSApprox'
" Plug 'Lokaltog/vim-easymotion'      " easy motion

" Plug 'git@github.com:Shougo/vimproc.vim.git'
" Plug 'Shougo/unite.vim'             " maybe ctrlp replacement
" Plug 'dbakker/vim-projectroot'      " necessarry to guess project root
" Plug 'Shougo/neomru.vim'            " MRU functionality for Unite.vim
" Plug 'tpope/vim-obsession'          "session management
" Plug 'dhruvasagar/vim-prosession'   "switch between sessions
" Plug 'kien/ctrlp.vim'                  " full path fuzzy finder
" All of your Plugs must be added before the following line

call plug#end()
" }}}

" Autocmd {{{
if has('autocmd')
    filetype plugin indent on
    "don't expand tabs if we're in a makefile
    autocmd BufRead,BufNewFile Makefile set ts=4 sw=4 noexpandtab
    "wrap lines in TeX
    autocmd BufRead,BufNewFile *.tex set tw=80
    "wrap lines in .txt files
    autocmd BufNewFile,BufRead *.txt set tw=78
    autocmd BufNewFile,BufRead *.md set tw=78
    " salt states are just yaml files
    autocmd BufNewFile,BufRead *.sls set ft=yaml sw=2 ts=2

    autocmd FileType python set omnifunc=pythoncomplete#Complete
    autocmd FileType python set ts=4 sw=4 et
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    "autocmd VimEnter * wincmd p
    " ruby completion
    autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
    " autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    autocmd FileType ruby,eruby set sw=2 ts=2 tw=80
    autocmd FileType coffee set sw=2 ts=2 tw=80
    " remove trailing whitespaces
    autocmd BufWritePre * :%s/\s\+$//e
    autocmd FileType yaml,yml set sw=2 ts=2 tw=80
    autocmd FileType markdown set tw=80 conceallevel=2 wrap
    autocmd FileType markdown setlocal spell
    autocmd FileType markdown set complete+=k
    " markdown
    au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,README.md  setf markdown
    " automatically open quickfix window for cofee script
    "autocmd QuickFixCmdPost * nested cwindow | redraw!
    " recompile file on write
    " autocmd BufWritePost *.coffee silent make!
    "
    " automatically generate ctags on write
    "au BufWritePost *.c,*.cpp,*.h,*.rb,*.js silent! !ctags -R &

    " enable spelling on GIT commit messages
    autocmd FileType gitcommit setlocal spell
    " enable auto word wrap in commit messages
    autocmd FileType gitcommit set sw=2 ts=2 tw=80 aw complete+=k
    " enable spelling and autowrap on pull requests
    autocmd VimEnter .git/PULLREQ_EDITMSG nested setlocal filetype=markdown

    " jump to the last cursor position
    augroup resCur
      autocmd!
      autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

    augroup END


    augroup ansible
        autocmd BufRead,BufNewFile */host_vars/* set ft=yaml
        autocmd BufRead,BufNewFile */group_vars/* set ft=yaml
        autocmd BufRead,BufNewFile *.j2 set ft=jinja2
    augroup END

    autocmd FileType gitrebase noremap <CR> :Cycle<CR>

    " run neomake on every write
    " autocmd! BufWritePost ruby,eruby Neomake
    autocmd! BufWritePost * Neomake

endif " }}}

" VIM Settings {{{
" syntax highlighting
syntax enable

set bg=dark
" set t_Co=256
" let base16colorspace=256

set bs=2                " Allow backspacing over everything in insert mode
set ai                  " Always set auto-indenting on
set si
"set backup             " Keep a backup file
"set viminfo='20,\"50   " read/write a .viminfo file -- limit to only 50
set history=50          " keep 50 lines of command history
set ts=4                " 4 space wide tabs
set sw=4
set softtabstop=4     "makes backspacing over spaced out tabs work real nice
set expandtab           "expand tabs to spaces
set ignorecase
set background=dark     "awesome for terminals with crappy colors (putty!)
set tagstack            "lets you push and pop your jumps with ctrl+]
set pastetoggle=<F11>   "when you're pasting stuff this keeps it from getting
                        "all whacked out with indentation
set showmatch
set showmode
set smarttab
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set incsearch
set spellfile=~/.vim/spell/en.utf-8.add
set modelines=5         " check for vim settings in X lines of read file
set complete-=k         " autocompletion - disable dictionary based
set hlsearch
set ignorecase
set smartcase
set hidden " do not save history when leaving buffer
set foldlevelstart=1
set formatoptions=tcrqnj
set diffopt=horizontal,filler

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" explorer
let g:explVertical=1      " Split vertically
let g:explSplitRight=1    " Put new window to the right of the explorer

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2
set ruler               " Show the cursor position all the time
set rulerformat=%30(%<%m%y%h%r%=%l,%c\ %P%)
set showcmd
set wildmode=longest,list,full
set wildmenu

set autoread " reads the file when it has been changed outside vim
" set encoding=utf-8

" files related
set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

" Searching in the menu
set completeopt=menuone,longest,preview

set clipboard=unnamed
" Make 81st column stand out
highlight ColorColumn ctermbg=Brown ctermfg=Black
call matchadd('ColorColumn', '\%81v', 100)

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
"exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set list
set showbreak=↪


" move focus to correct place after the split
set splitbelow " open splits below current pane
set splitright " ... to the right of current pane

" }}}

" normal mode mappings (general) {{{
nnoremap <silent> <Leader>q :nohlsearch<CR><C-L>
nnoremap <CR> :noh<CR><CR>

" Replace all occurences of word under cursor
nnoremap <Leader>z :%s/\<<C-r><C-w>\>//g<Left><Left>
" space bar folding
nnoremap  <silent>  <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
nnoremap <F12> :bn<CR>
nnoremap <S-F12> :bp<CR>

" disable arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Don't use Ex mode, use Q for formatting
map Q gq

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" lookup in Dash
nmap <silent> <leader>d <Plug>DashSearch

" buffer navigation
" new buffer (empty)
nmap <silent> <leader>t :enew<CR>
" next buffer
nmap <silent> <leader>n :bnext<CR>
" previous buffer
nmap <silent> <leader>p :bprevious<CR>
"close the buffer
nmap <silent> <leader>c :bp <BAR> bd #<CR>
" show all open buffers in buffer explorer
" nmap <silent> <leader>b :ls<CR>
" nmap <silent> <leader>b :CtrlPBuffer<cr>

" ruby context endings - insert marks
nmap <Leader>z /end%y$%A # p:nohlsearch

" }}}

" visual mode mappings {{{

" indent / deindent after selecting the text with (⇧ v), (.) to repeat.
vnoremap <Tab> >
vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Cut, Paste, Copy
vmap <C-x> d
vmap <C-v> p
vmap <C-c> y

" "}}}

" Plugins config {{{
" CtrlP {{{
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
set wildignore+=**/node_modules
" let g:ctrlp_open_new_file = "r"
" let g:ctrlp_match_func = {'match' : 'matcher#cmatch' } "fuzzy matching with ctrlp+cmatcher"
let g:ctrlp_extensions = ['tag']
" let g:ctrlp_cmd = 'CtrlPMixed'
nmap <C-S-p> :CtrlPMixed<CR>
" }}}
" Completion plugins (YCM/UltiSnip/Supertab) {{{
" Ultisnip - disabled shortcuts so they don't conflict with YouCompleteMe
let g:SuperTabDefaultCompletionType = '<C-n>'
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
"}}}
" vim-airline {{{
let g:airline_theme = 'monochrome'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#fnamemod = ':t' "display just filenames
let g:airline#extensions#tabline#buffer_nr_show = 1
" disable file format and encoding
" let g:airline_section_y = ''
" display
let g:airline_section_z = '%l,%c'
" }}}
" {{{ vim-markdown - no folding
" let g:vim_markdown_folding_disabled=0
let g:vim_markdown_folding_disabled = 0
let g:vim_markdown_new_list_item_indent = 2
" }}}

" NERDTree - autoclose when last buffer {{{
map <F4> :NERDTreeToggle<CR>
" }}}
" neomake {{{
map <silent> <Leader>s :NeoMake<CR>

" }}}
" instant markdown {{{
let g:instant_markdown_slow = 1
" "}}}
" tcomment {{{
let g:tcomment#replacements_xml={}
" }}}
" fugitive {{{
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gp :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gps :Dispatch! git push<CR>
nnoremap <Leader>gpl :Dispatch! git pull<CR>
" git merges
map <silent> <leader>2 :diffget //2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget //3<CR> :diffupdate<CR>
" gitv
nnoremap <Leader>gv :Gitv --all<CR>
nnoremap <Leader>gV :Gitv! --all<CR>

" }}}
" Geeknote markdown by default {{{2
let g:GeeknoteFormat="markdown"
"}}}
" {{{2 prosession configuration
let g:prosession_dir = '~/.vim/session/'
let g:prosession_tmux_title = 1
"}}}
" vim-pad {{{2
let g:pad#dir = '~/Dropbox/notes'
let g:pad#maps#new = "<meta>n"
let g:pad#search_backend = 'ag'
let g:pad#default_format = "votl"
let g:pad#default_file_extension = '.otl'
let g:pad#window_height = 25
" let g:pad#open_in_split = 0   " open in main window
let g:pad#title_first_line = 1
"}}}
" easy align{{{2
"
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
"
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
""}}}
" vim-gist {{{2
let g:gist_api_url = 'https://github.rackspace.com/api/v3'
let g:gist_post_private = 1
""}}}

" deoplete {{{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1
" tab completion
" inoremap <Leader><Tab> <Tab>
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif



" }}}}


" end of plugin config }}}

" gui related stuff {{{
if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
      set guifont=Sauce\ Code\ Powerline:h14
      set guioptions-=r
   endif
endif
" }}}

" ag - The Silver Searcher {{{
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
let g:ag_prg="/usr/local/bin/ag --vimgrep"

" }}}

" slimux - interactive sessions started directly from vim {{{
map <Leader>l :SlimuxREPLSendLine<CR>
vmap <Leader>l :SlimuxREPLSendSelection<CR>

" }}}

" {{{ tabular
if exists(':Tabularize')
    AddTabularPattern first_comma /^[^,]*\zs,/r0c0l0
    AddTabularPattern first_colon /^[^:]*\zs:/r1c0l0
    AddTabularPattern rocket /^[^=>]*\zs=>/l1
end
" }}}

" fzf - fuzzy search {{{
map <C-p> :FZF<CR>
vmap <C-p> :FZF<CR>

map <Leader>b :Buffers<CR>
vmap <Leader>b :Buffers<CR>
" }}}

"{{{ colorscheme
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
colorscheme hybrid
"}}}

" custom commands {{{
" bind \a (backward slash) to grep shortcut
"command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" map ag to leader a
nnoremap <Leader>a :Ag<SPACE>

" json prettyfiy
command! JSONPretty %!python -m json.tool
" ruby - convert hashes to 1.9+ syntax
command! NewRubyHashes :%s/:\([^ ]*\)\(\s*\)=>/\1:/g
" retab to n spaces
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
" load all feature branch commits into buffer
command! PRlog Glog master..HEAD --reverse --

" fix search highlight color
" This has to be placed after plugins.
hi Search cterm=NONE ctermfg=0 ctermbg=24

" create file with subdirectories if needed :E
function! s:MKDir(...)
    if         !a:0
           \|| stridx('`+', a:1[0])!=-1
           \|| a:1=~#'\v\\@<![ *?[%#]'
           \|| isdirectory(a:1)
           \|| filereadable(a:1)
           \|| isdirectory(fnamemodify(a:1, ':p:h'))
        return
    endif
    return mkdir(fnamemodify(a:1, ':p:h'), 'p')
endfunction
command! -bang -bar -nargs=? -complete=file E :call s:MKDir(<f-args>) | e<bang> <args>

" Useful trick when I've forgotten to `sudo' before editing a file:
cmap w!! w !sudo tee % >/dev/null


" }}}

" custom bindings {{{

" Map `kj` to ESC
imap kj <ESC>

" automatically insert a \v before any search string, so search uses normal regexes
nnoremap / /\v
vnoremap / /\v

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Easy reloading of vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>


nmap <silent> <F1> :Pad ls<CR>
nmap <silent> <F2> :Pad new<CR>

" Switch to alternative file quickly
nnoremap <Tab><Tab> <C-^>

" neovim's terminal
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
nnoremap <C-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l


autocmd BufEnter term://* startinsert


" }}}

" projects {{{
let g:project_use_nerdtree = 0
set rtp+=~/.vim/bundle/vim-project/
call project#rc("~/devel")
Project 'scratch'
Project '~/dotfiles'
" }}}


" vim-outliner {{{
" autocmd! FileType votl inoremap <C-n> <ESC>:call UltiSnips#ExpandSnippet()<CR>i
autocmd! FileType votl inoremap <C-n> <Esc>:call UltiSnips#ExpandSnippetOrJump()<CR>
autocmd! FileType votl set nolist foldlevel=1

" }}}

" local machine config {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
"}}}

" vim: foldmethod=marker foldlevel=0
