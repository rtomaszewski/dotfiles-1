set nocompatible              " be iMproved, required filetype off

" {{{ VUNDLE - enabled plugins
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()"

Plugin 'gmarik/Vundle.vim'               " vundle itself
Plugin 'tpope/vim-fugitive'              " git wrapper
Plugin 'SirVer/ultisnips'                " code snippets
Plugin 'honza/vim-snippets'              " actual snippets
Plugin 'ervandew/supertab'               " allows TAB to be used for auto completion
Plugin 'scrooloose/syntastic'            " syntastic color checking
Plugin 'Valloric/YouCompleteMe'          " auto completion engine
Plugin 'tomtom/tcomment_vim'             " easy comments
Plugin 'rstacruz/sparkup'                " parser for condensed HTML
Plugin 'bling/vim-airline'               " nice statusline
Plugin 'jwhitley/vim-matchit'            " better jumping with %
Plugin 'endwise.vim'                     " wisely 'end' functions etc
Plugin 'kchmck/vim-coffee-script'        " coffe script support
Plugin 'godlygeek/tabular'               " dependency for vim-markdown
Plugin 'plasticboy/vim-markdown'         " markdown syntax
Plugin 'tpope/vim-repeat'                " extend support for repeating with .
" " npm -g install instant-markdown-d
" Plugin 'suan/vim-instant-markdown'     " instant markdown preview
Plugin 'Raimondi/delimitMate'            " insert mode completion for quotes, etc
Plugin 'tpope/vim-surround'              " quickly surround
Plugin 'ecomba/vim-ruby-refactoring'     " ruby refactoring functions
Plugin 'scrooloose/nerdtree'             " file manager
Plugin 'thoughtbot/vim-rspec'            " rspec runner
Plugin 'tpope/vim-dispatch'              " start stuff in background
Plugin 'nelstrom/vim-textobj-rubyblock'  " text object for selecting ruby blocks
Plugin 'kana/vim-textobj-user'           " dependency for vim-textobj-rubyblock
Plugin 'christoomey/vim-tmux-navigator'  " seamless navigation between tmux panes and splits
Plugin 'neilagabriel/vim-geeknote'       " evernote vim support
Plugin 'chriskempson/base16-vim'         " base16 colors
Plugin 'tpope/vim-unimpaired'            " set of movement mappings
Plugin 'henrik/vim-qargs'                " adds :Qargs command
Plugin 'dhruvasagar/vim-table-mode'      " helps with creating tables
Plugin 'tpope/vim-rvm'                   " RVM support
Plugin 'mrtazz/simplenote.vim'           " simplenote support
Plugin 'benmills/vimux'                  " interact with tmux
Plugin 'jgdavey/vim-turbux'              " Turbo Ruby testing with tmux
Plugin 'fmoralesc/vim-pad'               " Evernote replacement
Plugin 'kien/ctrlp.vim'                  " full path fuzzy finder
Plugin 'gregsexton/gitv'                 " gitk for vim
Plugin 'nathanaelkane/vim-indent-guides' " visual indent
Plugin 'idanarye/vim-merginal'           " help with merges and rebase
"}}}

" {{{ DISABLED Plugins
" Plugin 'cseelus/vim-colors-clearance'
" Plugin 'MaxSt/FlatColor'
" Plugin 'blerins/flattown'
" Plugin 'rizzatti/dash.vim' - disabled  - took way too long to startup
" Plugin 'tpope/vim-bundler' " probably not needed (Jul 2015)
" Plugin 'mattly/iterm-colors-pencil'
" Plugin 'reedes/vim-colors-pencil'
" Plugin 'tpope/vim-rails' "set of rails helpers
" Plugin 'airblade/vim-gitgutter'
" Plugin 'flazz/vim-colorschemes'  " all colorschemes
" Plugin 'skrobul/grb256'          " my version of grb256
" Plugin 'vim-scripts/CSApprox'
" Plugin 'Lokaltog/vim-easymotion'      " easy motion
" Plugin 'slim-template/vim-slim.git'   " slim templating support
" Plugin 'git@github.com:Shougo/vimproc.vim.git'
" Plugin 'Shougo/unite.vim'             " maybe ctrlp replacement
" Plugin 'dbakker/vim-projectroot'      " necessarry to guess project root
" Plugin 'Shougo/neomru.vim'            " MRU functionality for Unite.vim
" Plugin 'tpope/vim-obsession'          "session management
" Plugin 'dhruvasagar/vim-prosession'   "switch between sessions
" All of your Plugins must be added before the following line
call vundle#end()            " required
" }}}

" Autocmd {{{
if has('autocmd')
    filetype plugin indent on
    "don't expand tabs if we're in a makefile
    autocmd BufRead,BufNewFile Makefile set ts=4 sw=4 noexpandtab
    "wrap lines in TeX
    autocmd BufRead,BufNewFile *.tex set tw=80
    "wrap lines in .txt files
    autocmd BufNewFile,BufRead *.txt set tw=78
    autocmd BufNewFile,BufRead *.md set tw=78
    " salt states are just yaml files
    autocmd BufNewFile,BufRead *.sls set ft=yaml sw=2 ts=2

    autocmd FileType python set omnifunc=pythoncomplete#Complete
    autocmd FileType python set ts=4 sw=4 et
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    "autocmd VimEnter * wincmd p
    " ruby completion
    autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
    " autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
    " autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    autocmd FileType ruby,eruby set sw=2 ts=2 tw=80
    autocmd FileType coffee set sw=2 ts=2 tw=80
    " remove trailing whitespaces
    autocmd BufWritePre * :%s/\s\+$//e
    autocmd FileType yaml,yml set sw=2 ts=2 tw=80
    autocmd FileType markdown set tw=80 wrap
    autocmd FileType markdown setlocal spell
    autocmd FileType markdown set complete+=k
    " markdown
    au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,README.md  setf markdown
    " automatically open quickfix window for cofee script
    "autocmd QuickFixCmdPost * nested cwindow | redraw!
    " recompile file on write
    " autocmd BufWritePost *.coffee silent make!
    "
    " automatically generate ctags on write
    "au BufWritePost *.c,*.cpp,*.h,*.rb,*.js silent! !ctags -R &

    " enable spelling on GIT commit messages
    autocmd FileType gitcommit setlocal spell
    " enable auto word wrap in commit messages
    autocmd FileType gitcommit set sw=2 ts=2 tw=80 aw complete+=k
    " enable spelling and autowrap on pull requests
    autocmd VimEnter .git/PULLREQ_EDITMSG nested setlocal filetype=markdown

    " Nerd tree auto commands
    " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    " open NERDtree when no files are specified
    " autocmd StdinReadPre * let s:std_in=1
    " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    " hardmode plugin :)
    " enable hard mode by default
    " autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

    augroup ansible
        autocmd BufRead,BufNewFile */host_vars/* set ft=yaml
        autocmd BufRead,BufNewFile */group_vars/* set ft=yaml
        autocmd BufRead,BufNewFile *.j2 set ft=jinja2
    augroup END

    autocmd FileType gitrebase noremap <CR> :Cycle<CR>
endif " }}}

" VIM Settings {{{
" syntax highlighting
syntax enable

" set bg=dark
" let g:rehash256 = 1
set t_Co=256
let base16colorspace=256
colorscheme base16-ocean

set nocompatible        " Use Vim defaults (much better!)
set bs=2                " Allow backspacing over everything in insert mode
set ai                  " Always set auto-indenting on
"set backup             " Keep a backup file
"set viminfo='20,\"50    " read/write a .viminfo file -- limit to only 50
set history=50          " keep 50 lines of command history
set ts=4                " 4 space wide tabs
set sw=4
set softtabstop=4     "makes backspacing over spaced out tabs work real nice
set expandtab           "expand tabs to spaces
set ignorecase
set background=dark     "awesome for terminals with crappy colors (putty!)
set tagstack            "lets you push and pop your jumps with ctrl+]
set pastetoggle=<F11>   "when you're pasting stuff this keeps it from getting
                        "all whacked out with indentation
set showmatch
set showmode
set smarttab
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set incsearch
set ttyfast " faster redrawing"
set spellfile=~/.vim/spell/en.utf-8.add
set modelines=5         " check for vim settings in X lines of read file
set complete-=k         " autocompletion - disable dictionary based
set hlsearch
set ignorecase
set smartcase
set hidden " do not save history when leaving buffer
set foldlevelstart=5

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" explorer
let g:explVertical=1      " Split vertically
let g:explSplitRight=1    " Put new window to the right of the explorer

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2
set ruler               " Show the cursor position all the time
set rulerformat=%30(%<%m%y%h%r%=%l,%c\ %P%)
set showcmd
set wildmode=longest,list,full
set wildmenu

set autoread " reads the file when it has been changed outside vim
set encoding=utf-8

" files related
set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

" Searching in the menu
set completeopt=menuone,longest,preview

set clipboard=unnamed
" Make 81st column stand out
highlight ColorColumn ctermbg=Brown ctermfg=Black
call matchadd('ColorColumn', '\%81v', 100)

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
"exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set list
set showbreak=↪


" move focus to correct place after the split
set splitbelow " open splits below current pane
set splitright " ... to the right of current pane

" }}}

" normal mode mappings (general) {{{
nnoremap <silent> <Leader>q :nohlsearch<CR><C-L>
nnoremap <CR> :noh<CR><CR>

" Replace all occurences of word under cursor
nnoremap <Leader>z :%s/\<<C-r><C-w>\>//g<Left><Left>
" space bar folding
nnoremap  <silent>  <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
nnoremap <F12> :bn<CR>
nnoremap <S-F12> :bp<CR>

" disable arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Don't use Ex mode, use Q for formatting
map Q gq

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" lookup in Dash
nmap <silent> <leader>d <Plug>DashSearch

" buffer navigation
" new buffer (empty)
nmap <silent> <leader>t :enew<CR>
" next buffer
nmap <silent> <leader>n :bnext<CR>
" previous buffer
nmap <silent> <leader>p :bprevious<CR>
"close the buffer
nmap <silent> <leader>c :bp <BAR> bd #<CR>
" show all open buffers in buffer explorer
" nmap <silent> <leader>b :ls<CR>
nmap <silent> <leader>b :CtrlPBuffer<cr>

" ruby context endings - insert marks
nmap <Leader>z /end%y$%A # p:nohlsearch

" }}}

" visual mode mappings {{{

" indent / deindent after selecting the text with (⇧ v), (.) to repeat.
vnoremap <Tab> >
vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Cut, Paste, Copy
vmap <C-x> d
vmap <C-v> p
vmap <C-c> y

" "}}}

" Plugins config {{{
" CtrlP {{{
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
set wildignore+=**/node_modules
" let g:ctrlp_open_new_file = "r"
" let g:ctrlp_match_func = {'match' : 'matcher#cmatch' } "fuzzy matching with ctrlp+cmatcher"
let g:ctrlp_extensions = ['tag']
" let g:ctrlp_cmd = 'CtrlPMixed'
nmap <C-S-p> :CtrlPMixed<CR>
" }}}
" Completion plugins (YCM/UltiSnip/Supertab) {{{
" Ultisnip - disabled shortcuts so they don't conflict with YouCompleteMe
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" YCM: pre-populate completion with language syntax
let g:ycm_seed_identifiers_with_syntax = 1

" YCM: seed identifier databse with your files
" disable this if your tags are on network drive
let g:ycm_collect_identifiers_from_tags_files = 1

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
"}}}
" vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#fnamemod = ':t' "display just filenames
let g:airline#extensions#tabline#buffer_nr_show = 1
" disable file format and encoding
let g:airline_section_y = ''
" display
let g:airline_section_z = '%l,%c'
" }}}
" {{{ vim-markdown - no folding
let g:vim_markdown_folding_disabled=0
" }}}
" NERDTree - autoclose when last buffer {{{
map <F4> :NERDTreeToggle<CR>
" }}}
" syntastic {{{
let g:syntastic_ruby_checkers = ['mri', 'rubocop'] ", 'rubylint', 'rubocop']
let g:syntastic_ruby_rubocop_exec = '/Users/marek.skrobacki/.rvm//gems/ruby-2.2.2/wrappers/rubocop'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" switch syntastic to passive mode by default. active mode can be switched on
" with ctrl-w e. alternatively, single check can be triggered by LeaderS
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
map <silent> <Leader>s :SyntasticCheck<CR>
" }}}
" instant markdown {{{
let g:instant_markdown_slow = 1
" "}}}
" tcomment {{{
let g:tcomment#replacements_xml={}
" }}}
" fugitive {{{
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gp :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gps :Dispatch! git push<CR>
nnoremap <Leader>gpl :Dispatch! git pull<CR>
" git merges
map <silent> <leader>2 :diffget //2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget //3<CR> :diffupdate<CR>
" gitv
nnoremap <Leader>gv :Gitv --all<CR>
nnoremap <Leader>gV :Gitv! --all<CR>

" }}}
" Geeknote markdown by default {{{2
let g:GeeknoteFormat="markdown"
"}}}
" {{{2 prosession configuration
let g:prosession_dir = '~/.vim/session/'
let g:prosession_tmux_title = 1
"}}}
" vim-pad {{{2
let g:pad#dir = '~/Dropbox/notes'
let g:pad#maps#new = "<leader>1"
let g:pad#search_backend = 'ag'
let g:pad#default_format = "markdown"
let g:pad#default_file_extension = '.md'
let g:pad#window_height = 25
" let g:pad#open_in_split = 0   " open in main window
let g:pad#title_first_line = 1
"}}}
" end of plugin config }}}

" gui related stuff {{{
if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
      set guifont=Menlo\ for\ Powerline:h15
      set guioptions-=r
   endif
endif
" }}}

" ag - The Silver Searcher {{{
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" }}}

" custom commands {{{
" bind \a (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" map ag to leader a
nnoremap <Leader>a :Ag<SPACE>

" json prettyfiy
command! JSONPretty %!python -m json.tool
" ruby - convert hashes to 1.9+ syntax
command! NewRubyHashes :%s/:\([^ ]*\)\(\s*\)=>/\1:/g
" retab to n spaces
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

" fix search highlight color
" This has to be placed after plugins.
hi Search cterm=NONE ctermfg=0 ctermbg=153

" }}}

" local machine config {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
"}}}

" vim: foldmethod=marker foldlevel=0
